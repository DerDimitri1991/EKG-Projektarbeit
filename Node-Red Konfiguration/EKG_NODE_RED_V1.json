[
    {
        "id": "406168d7e2283e1c",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7ccb836c476825f3",
        "type": "subflow",
        "name": "Device 2",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "155c5133bdfefab4",
        "type": "subflow",
        "name": "Device 1",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b61db2d397ed3f52",
        "type": "subflow",
        "name": "Device 3",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "83fee0b4628f9e33",
        "type": "subflow",
        "name": "Device 4",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "87c8228a65d82b8b",
        "type": "subflow",
        "name": "Device 5",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6d843e57b45b43cf",
        "type": "subflow",
        "name": "Device 6",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "73d2d98fc364e2ae",
        "type": "subflow",
        "name": "Device 7",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "e69a2f485c6c5f7d",
        "type": "subflow",
        "name": "Device 8",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "8082bc4b568774ed",
        "type": "subflow",
        "name": "Device 9",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "677f06d969d5a671",
        "type": "subflow",
        "name": "Device 10",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "b6da6b5f72cc125a",
        "type": "subflow",
        "name": "Device_00",
        "info": "",
        "category": "",
        "in": [],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c872088782b016c8",
        "type": "mqtt-broker",
        "name": "UbiEKG_Server",
        "broker": "mqtt://192.168.178.44:1883",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "baeac5fe2f990931",
        "type": "ui_group",
        "name": "ECG Data",
        "tab": "",
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "48948ca4cc63247d",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "49960283b5a051dd",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#0080ff",
                "baseFont": "Georgia,Georgia,serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "reset": false
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#0080ff",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0080ff",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#4da6ff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0080ff",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "Georgia,Georgia,serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "7161a4fc5f3d2a7d",
        "type": "ui_group",
        "name": "Device_01",
        "tab": "48948ca4cc63247d",
        "order": 1,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6a8dd33d9e7fde80",
        "type": "mqtt-broker",
        "name": "UbiEKG",
        "broker": "192.168.178.104",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "a84152a7771a9124",
        "type": "ui_group",
        "name": "Device_02",
        "tab": "48948ca4cc63247d",
        "order": 2,
        "disp": true,
        "width": 8,
        "collapse": false,
        "className": ""
    },
    {
        "id": "0876e735db5b5ed5",
        "type": "ui_group",
        "z": "b61db2d397ed3f52",
        "name": "Device_03",
        "tab": "48948ca4cc63247d",
        "order": 3,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "668d8e78f47630d3",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_04",
        "tab": "48948ca4cc63247d",
        "order": 4,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "736efe8823b8cf7e",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_05",
        "tab": "48948ca4cc63247d",
        "order": 5,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a85f89358f85f79a",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_06",
        "tab": "48948ca4cc63247d",
        "order": 6,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "181d4daec8055649",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_07",
        "tab": "48948ca4cc63247d",
        "order": 7,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7c3fe7dbf7b5fdb2",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_08",
        "tab": "48948ca4cc63247d",
        "order": 8,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "893eeb8e2cea3ff6",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_09",
        "tab": "48948ca4cc63247d",
        "order": 9,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "70e4546d2b9b7702",
        "type": "ui_group",
        "z": "83fee0b4628f9e33",
        "name": "Device_10",
        "tab": "48948ca4cc63247d",
        "order": 10,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "15f3328f74ed9705",
        "type": "ui_group",
        "z": "87c8228a65d82b8b",
        "name": "Device_05",
        "tab": "48948ca4cc63247d",
        "order": 11,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "067c42357b3bc972",
        "type": "ui_group",
        "z": "6d843e57b45b43cf",
        "name": "Device_06",
        "tab": "48948ca4cc63247d",
        "order": 12,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "574b012cc77fb53d",
        "type": "ui_group",
        "z": "73d2d98fc364e2ae",
        "name": "Device_07",
        "tab": "48948ca4cc63247d",
        "order": 13,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6bd34fd905a51ff8",
        "type": "ui_group",
        "z": "e69a2f485c6c5f7d",
        "name": "Device_08",
        "tab": "48948ca4cc63247d",
        "order": 14,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "4b6faf155b2cc2e1",
        "type": "ui_group",
        "z": "8082bc4b568774ed",
        "name": "Device_09",
        "tab": "48948ca4cc63247d",
        "order": 15,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d13e25f8bd900779",
        "type": "ui_group",
        "z": "677f06d969d5a671",
        "name": "Device_10",
        "tab": "48948ca4cc63247d",
        "order": 16,
        "disp": true,
        "width": "8",
        "collapse": false,
        "className": ""
    },
    {
        "id": "ef5292f4433f565d",
        "type": "mqtt in",
        "z": "7ccb836c476825f3",
        "name": "",
        "topic": "ecg/device2",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "22fe8a2291cadcd2",
                "6d71628555c44cb4",
                "8bf6bac7f9fb3152",
                "8042959456216844",
                "30c224b425ecf45f"
            ]
        ]
    },
    {
        "id": "22fe8a2291cadcd2",
        "type": "function",
        "z": "7ccb836c476825f3",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6d71628555c44cb4",
        "type": "function",
        "z": "7ccb836c476825f3",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "08d6652535133327"
            ]
        ]
    },
    {
        "id": "3e930b1081890d3d",
        "type": "mqtt in",
        "z": "7ccb836c476825f3",
        "name": "",
        "topic": "processed/device2",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "e77f0cb09b7d3362"
            ]
        ]
    },
    {
        "id": "909cc7d9066cb50b",
        "type": "ui_text",
        "z": "7ccb836c476825f3",
        "group": "a84152a7771a9124",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 610,
        "y": 460,
        "wires": []
    },
    {
        "id": "e77f0cb09b7d3362",
        "type": "function",
        "z": "7ccb836c476825f3",
        "name": "function 15",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 520,
        "wires": [
            [
                "7d18f6254c3db317",
                "909cc7d9066cb50b"
            ],
            [
                "600ec5de50732b5f"
            ],
            [
                "7392725cacc5189d"
            ],
            [
                "e5770fdf92ecf0c1"
            ],
            [
                "9a6a8fa15d589fd3"
            ]
        ]
    },
    {
        "id": "7d18f6254c3db317",
        "type": "ui_chart",
        "z": "7ccb836c476825f3",
        "name": "",
        "group": "a84152a7771a9124",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "600ec5de50732b5f",
        "type": "ui_chart",
        "z": "7ccb836c476825f3",
        "name": "",
        "group": "a84152a7771a9124",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "7392725cacc5189d",
        "type": "ui_template",
        "z": "7ccb836c476825f3",
        "group": "a84152a7771a9124",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "e5770fdf92ecf0c1",
        "type": "ui_gauge",
        "z": "7ccb836c476825f3",
        "name": "",
        "group": "a84152a7771a9124",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 580,
        "wires": []
    },
    {
        "id": "8bf6bac7f9fb3152",
        "type": "function",
        "z": "7ccb836c476825f3",
        "name": "function 16",
        "func": "const deviceId = \"ECG-2\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 60,
        "wires": [
            [
                "4238e53d5a24e982"
            ]
        ]
    },
    {
        "id": "4238e53d5a24e982",
        "type": "ui_template",
        "z": "7ccb836c476825f3",
        "group": "a84152a7771a9124",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "9a6a8fa15d589fd3",
        "type": "function",
        "z": "7ccb836c476825f3",
        "name": "function 17",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 620,
        "wires": [
            [
                "c7e735f433aaa284"
            ]
        ]
    },
    {
        "id": "c7e735f433aaa284",
        "type": "ui_template",
        "z": "7ccb836c476825f3",
        "group": "a84152a7771a9124",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "08d6652535133327",
        "type": "ui_gauge",
        "z": "7ccb836c476825f3",
        "name": "",
        "group": "a84152a7771a9124",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 220,
        "wires": []
    },
    {
        "id": "8042959456216844",
        "type": "function",
        "z": "7ccb836c476825f3",
        "name": "function 4",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 20,
        "wires": [
            [
                "eab68f7acf870396"
            ]
        ]
    },
    {
        "id": "eab68f7acf870396",
        "type": "file",
        "z": "7ccb836c476825f3",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device2.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "d24501da32a1a851",
        "type": "inject",
        "z": "7ccb836c476825f3",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-2\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 370,
        "y": 140,
        "wires": [
            [
                "8bf6bac7f9fb3152"
            ]
        ]
    },
    {
        "id": "30c224b425ecf45f",
        "type": "debug",
        "z": "7ccb836c476825f3",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 600,
        "y": 120,
        "wires": []
    },
    {
        "id": "32c80c4420d7a583",
        "type": "mqtt in",
        "z": "155c5133bdfefab4",
        "name": "",
        "topic": "ecg/device1",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 140,
        "wires": [
            [
                "34026706231d9421",
                "c26185767e4527b8",
                "62ecf18775afa40c",
                "cdf339fbcc5d9edd"
            ]
        ]
    },
    {
        "id": "435e89a2a1eee79c",
        "type": "ui_gauge",
        "z": "155c5133bdfefab4",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 650,
        "y": 240,
        "wires": []
    },
    {
        "id": "34026706231d9421",
        "type": "function",
        "z": "155c5133bdfefab4",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "c26185767e4527b8",
        "type": "function",
        "z": "155c5133bdfefab4",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 240,
        "wires": [
            [
                "435e89a2a1eee79c"
            ]
        ]
    },
    {
        "id": "a09e0366ef1e6d4b",
        "type": "mqtt in",
        "z": "155c5133bdfefab4",
        "name": "",
        "topic": "processed/device1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 500,
        "wires": [
            [
                "4785a115f1bfe48e"
            ]
        ]
    },
    {
        "id": "e1ccd30e380f7139",
        "type": "ui_text",
        "z": "155c5133bdfefab4",
        "group": "7161a4fc5f3d2a7d",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#09afff",
        "x": 610,
        "y": 440,
        "wires": []
    },
    {
        "id": "4785a115f1bfe48e",
        "type": "function",
        "z": "155c5133bdfefab4",
        "name": "function 24",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 500,
        "wires": [
            [
                "af082695a058a33e",
                "e1ccd30e380f7139"
            ],
            [
                "6e5235c8e286a8b3"
            ],
            [
                "11fd0b8eb50448cb"
            ],
            [
                "1d29a5471bf0d94c"
            ],
            [
                "4f28c22cd66719ea"
            ]
        ]
    },
    {
        "id": "af082695a058a33e",
        "type": "ui_chart",
        "z": "155c5133bdfefab4",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "6e5235c8e286a8b3",
        "type": "ui_chart",
        "z": "155c5133bdfefab4",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "11fd0b8eb50448cb",
        "type": "ui_template",
        "z": "155c5133bdfefab4",
        "group": "7161a4fc5f3d2a7d",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "1d29a5471bf0d94c",
        "type": "ui_gauge",
        "z": "155c5133bdfefab4",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 560,
        "wires": []
    },
    {
        "id": "4f28c22cd66719ea",
        "type": "function",
        "z": "155c5133bdfefab4",
        "name": "function 26",
        "func": "let rsp = parseFloat(msg.payload);\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 600,
        "wires": [
            [
                "5ca982951e6ba063"
            ]
        ]
    },
    {
        "id": "5ca982951e6ba063",
        "type": "ui_template",
        "z": "155c5133bdfefab4",
        "group": "7161a4fc5f3d2a7d",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div style=\"color: {{msg.color}}; font-size: 20px; font-weight: bold;\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 860,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "11a9f31ca17c7eb5",
        "type": "ui_template",
        "z": "155c5133bdfefab4",
        "group": "7161a4fc5f3d2a7d",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 640,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "62ecf18775afa40c",
        "type": "function",
        "z": "155c5133bdfefab4",
        "name": "function 25",
        "func": "const deviceId = \"ECG-1\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 80,
        "wires": [
            [
                "11a9f31ca17c7eb5"
            ]
        ]
    },
    {
        "id": "cdf339fbcc5d9edd",
        "type": "function",
        "z": "155c5133bdfefab4",
        "name": "function 3",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 20,
        "wires": [
            [
                "9dca23ae55635c5a"
            ]
        ]
    },
    {
        "id": "9dca23ae55635c5a",
        "type": "file",
        "z": "155c5133bdfefab4",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device1.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 770,
        "y": 20,
        "wires": [
            []
        ]
    },
    {
        "id": "e1ff44d70aa29c33",
        "type": "inject",
        "z": "155c5133bdfefab4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-1\",   \"msg_id\": 0,   \"pads_connected\": false,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 430,
        "y": 160,
        "wires": [
            [
                "62ecf18775afa40c"
            ]
        ]
    },
    {
        "id": "94a6680b2e8911bf",
        "type": "mqtt in",
        "z": "b61db2d397ed3f52",
        "name": "",
        "topic": "ecg/device3",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 140,
        "wires": [
            [
                "32c78a9dca72d3b0",
                "ce4d9e4bedcfce53",
                "5fd4b3cc1d3ebed9",
                "481ac578d4a75eeb"
            ]
        ]
    },
    {
        "id": "32c78a9dca72d3b0",
        "type": "function",
        "z": "b61db2d397ed3f52",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ce4d9e4bedcfce53",
        "type": "function",
        "z": "b61db2d397ed3f52",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "e1f270ab76479276"
            ]
        ]
    },
    {
        "id": "b14bf4cf356802fd",
        "type": "mqtt in",
        "z": "b61db2d397ed3f52",
        "name": "",
        "topic": "processed/device3",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 540,
        "wires": [
            [
                "b6728f52ac6b2e1d"
            ]
        ]
    },
    {
        "id": "2fbfe0551065b9dc",
        "type": "ui_text",
        "z": "b61db2d397ed3f52",
        "group": "0876e735db5b5ed5",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 610,
        "y": 480,
        "wires": []
    },
    {
        "id": "b6728f52ac6b2e1d",
        "type": "function",
        "z": "b61db2d397ed3f52",
        "name": "function 9",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 540,
        "wires": [
            [
                "8dd4e134500dd944",
                "2fbfe0551065b9dc"
            ],
            [
                "3709e6af5756671e"
            ],
            [
                "faeac85b0f7d5fb4"
            ],
            [
                "53c743329be07fce"
            ],
            [
                "6767c299df6ca94e"
            ]
        ]
    },
    {
        "id": "8dd4e134500dd944",
        "type": "ui_chart",
        "z": "b61db2d397ed3f52",
        "name": "",
        "group": "0876e735db5b5ed5",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "3709e6af5756671e",
        "type": "ui_chart",
        "z": "b61db2d397ed3f52",
        "name": "",
        "group": "0876e735db5b5ed5",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "faeac85b0f7d5fb4",
        "type": "ui_template",
        "z": "b61db2d397ed3f52",
        "group": "0876e735db5b5ed5",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "53c743329be07fce",
        "type": "ui_gauge",
        "z": "b61db2d397ed3f52",
        "name": "",
        "group": "0876e735db5b5ed5",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 600,
        "wires": []
    },
    {
        "id": "5fd4b3cc1d3ebed9",
        "type": "function",
        "z": "b61db2d397ed3f52",
        "name": "function 10",
        "func": "const deviceId = \"ECG-3\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 80,
        "wires": [
            [
                "04bba08a5967b932"
            ]
        ]
    },
    {
        "id": "04bba08a5967b932",
        "type": "ui_template",
        "z": "b61db2d397ed3f52",
        "group": "0876e735db5b5ed5",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6767c299df6ca94e",
        "type": "function",
        "z": "b61db2d397ed3f52",
        "name": "function 11",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 640,
        "wires": [
            [
                "f816a4989a33764d"
            ]
        ]
    },
    {
        "id": "f816a4989a33764d",
        "type": "ui_template",
        "z": "b61db2d397ed3f52",
        "group": "0876e735db5b5ed5",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "e1f270ab76479276",
        "type": "ui_gauge",
        "z": "b61db2d397ed3f52",
        "name": "",
        "group": "0876e735db5b5ed5",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 240,
        "wires": []
    },
    {
        "id": "481ac578d4a75eeb",
        "type": "function",
        "z": "b61db2d397ed3f52",
        "name": "function 12",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [
            [
                "bfcecee5ce5c1399"
            ]
        ]
    },
    {
        "id": "bfcecee5ce5c1399",
        "type": "file",
        "z": "b61db2d397ed3f52",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device3.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "88a9b0e2c67df4a0",
        "type": "inject",
        "z": "b61db2d397ed3f52",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-3\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "5fd4b3cc1d3ebed9"
            ]
        ]
    },
    {
        "id": "0561a646fd11650f",
        "type": "mqtt in",
        "z": "83fee0b4628f9e33",
        "name": "",
        "topic": "ecg/device4",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "b04cd56342b390b2",
                "02058ba61d35d993",
                "c28b4060b15fd3cb",
                "43b16cf9e24e7df4"
            ]
        ]
    },
    {
        "id": "b04cd56342b390b2",
        "type": "function",
        "z": "83fee0b4628f9e33",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "02058ba61d35d993",
        "type": "function",
        "z": "83fee0b4628f9e33",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 260,
        "wires": [
            [
                "9049254ff3281465"
            ]
        ]
    },
    {
        "id": "b3bc5a697beab74d",
        "type": "mqtt in",
        "z": "83fee0b4628f9e33",
        "name": "",
        "topic": "processed/device4",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 240,
        "y": 560,
        "wires": [
            [
                "abe0bf89c1abd5fa"
            ]
        ]
    },
    {
        "id": "a1f782e4c9a52746",
        "type": "ui_text",
        "z": "83fee0b4628f9e33",
        "group": "668d8e78f47630d3",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 670,
        "y": 500,
        "wires": []
    },
    {
        "id": "abe0bf89c1abd5fa",
        "type": "function",
        "z": "83fee0b4628f9e33",
        "name": "function 22",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 560,
        "wires": [
            [
                "85c00d0fc6883198",
                "a1f782e4c9a52746"
            ],
            [
                "b5d688ac246952a7"
            ],
            [
                "6a8acbdb0c71ee47"
            ],
            [
                "27b819d7e6106527"
            ],
            [
                "7ccdc366370a4d97"
            ]
        ]
    },
    {
        "id": "85c00d0fc6883198",
        "type": "ui_chart",
        "z": "83fee0b4628f9e33",
        "name": "",
        "group": "668d8e78f47630d3",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "b5d688ac246952a7",
        "type": "ui_chart",
        "z": "83fee0b4628f9e33",
        "name": "",
        "group": "668d8e78f47630d3",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 700,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6a8acbdb0c71ee47",
        "type": "ui_template",
        "z": "83fee0b4628f9e33",
        "group": "668d8e78f47630d3",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 670,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "27b819d7e6106527",
        "type": "ui_gauge",
        "z": "83fee0b4628f9e33",
        "name": "",
        "group": "668d8e78f47630d3",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 620,
        "wires": []
    },
    {
        "id": "c28b4060b15fd3cb",
        "type": "function",
        "z": "83fee0b4628f9e33",
        "name": "function 23",
        "func": "const deviceId = \"ECG-4\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 100,
        "wires": [
            [
                "3c76925bf3dc5127"
            ]
        ]
    },
    {
        "id": "3c76925bf3dc5127",
        "type": "ui_template",
        "z": "83fee0b4628f9e33",
        "group": "668d8e78f47630d3",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 680,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7ccdc366370a4d97",
        "type": "function",
        "z": "83fee0b4628f9e33",
        "name": "function 24",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 660,
        "wires": [
            [
                "b835d586b1d84f8d"
            ]
        ]
    },
    {
        "id": "b835d586b1d84f8d",
        "type": "ui_template",
        "z": "83fee0b4628f9e33",
        "group": "668d8e78f47630d3",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 900,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "9049254ff3281465",
        "type": "ui_gauge",
        "z": "83fee0b4628f9e33",
        "name": "",
        "group": "668d8e78f47630d3",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 690,
        "y": 260,
        "wires": []
    },
    {
        "id": "43b16cf9e24e7df4",
        "type": "function",
        "z": "83fee0b4628f9e33",
        "name": "function 25",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 60,
        "wires": [
            [
                "eb5a534940ca2bc6"
            ]
        ]
    },
    {
        "id": "eb5a534940ca2bc6",
        "type": "file",
        "z": "83fee0b4628f9e33",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device4.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 810,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "81a217795af7c3dc",
        "type": "inject",
        "z": "83fee0b4628f9e33",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-4\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 430,
        "y": 180,
        "wires": [
            [
                "c28b4060b15fd3cb"
            ]
        ]
    },
    {
        "id": "2188bf5c5d6e589a",
        "type": "mqtt in",
        "z": "87c8228a65d82b8b",
        "name": "",
        "topic": "ecg/device5",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "6e8c410c569c9983",
                "88ab17acb492b2b7",
                "85a0c28624e7058d",
                "7bc558075e220647"
            ]
        ]
    },
    {
        "id": "6e8c410c569c9983",
        "type": "function",
        "z": "87c8228a65d82b8b",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "88ab17acb492b2b7",
        "type": "function",
        "z": "87c8228a65d82b8b",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            [
                "ef11c65b6d29d494"
            ]
        ]
    },
    {
        "id": "8c76ffacb0b720cb",
        "type": "mqtt in",
        "z": "87c8228a65d82b8b",
        "name": "",
        "topic": "processed/device5",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 560,
        "wires": [
            [
                "2488ee761fa1f577"
            ]
        ]
    },
    {
        "id": "7fe9713dc10bdc85",
        "type": "ui_text",
        "z": "87c8228a65d82b8b",
        "group": "15f3328f74ed9705",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 610,
        "y": 500,
        "wires": []
    },
    {
        "id": "2488ee761fa1f577",
        "type": "function",
        "z": "87c8228a65d82b8b",
        "name": "function 32",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "0c22ea67d697fe80",
                "7fe9713dc10bdc85"
            ],
            [
                "e4e9f8d5e5712198"
            ],
            [
                "a02aeb52af4f6d03"
            ],
            [
                "3b9ed2b955cd66d4"
            ],
            [
                "59807040064dd9cc"
            ]
        ]
    },
    {
        "id": "0c22ea67d697fe80",
        "type": "ui_chart",
        "z": "87c8228a65d82b8b",
        "name": "",
        "group": "15f3328f74ed9705",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e4e9f8d5e5712198",
        "type": "ui_chart",
        "z": "87c8228a65d82b8b",
        "name": "",
        "group": "15f3328f74ed9705",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "a02aeb52af4f6d03",
        "type": "ui_template",
        "z": "87c8228a65d82b8b",
        "group": "15f3328f74ed9705",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "3b9ed2b955cd66d4",
        "type": "ui_gauge",
        "z": "87c8228a65d82b8b",
        "name": "",
        "group": "15f3328f74ed9705",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 620,
        "wires": []
    },
    {
        "id": "85a0c28624e7058d",
        "type": "function",
        "z": "87c8228a65d82b8b",
        "name": "function 33",
        "func": "const deviceId = \"ECG-5\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "92a4ed659aa1ea4f"
            ]
        ]
    },
    {
        "id": "92a4ed659aa1ea4f",
        "type": "ui_template",
        "z": "87c8228a65d82b8b",
        "group": "15f3328f74ed9705",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "59807040064dd9cc",
        "type": "function",
        "z": "87c8228a65d82b8b",
        "name": "function 34",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 660,
        "wires": [
            [
                "150a44be018562c1"
            ]
        ]
    },
    {
        "id": "150a44be018562c1",
        "type": "ui_template",
        "z": "87c8228a65d82b8b",
        "group": "15f3328f74ed9705",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "ef11c65b6d29d494",
        "type": "ui_gauge",
        "z": "87c8228a65d82b8b",
        "name": "",
        "group": "15f3328f74ed9705",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 240,
        "wires": []
    },
    {
        "id": "7bc558075e220647",
        "type": "function",
        "z": "87c8228a65d82b8b",
        "name": "function 35",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "f66069aea88a785f"
            ]
        ]
    },
    {
        "id": "f66069aea88a785f",
        "type": "file",
        "z": "87c8228a65d82b8b",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device5.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "8a02faedd1da15dc",
        "type": "inject",
        "z": "87c8228a65d82b8b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-5\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "85a0c28624e7058d"
            ]
        ]
    },
    {
        "id": "fb518dec81ec4b87",
        "type": "mqtt in",
        "z": "6d843e57b45b43cf",
        "name": "",
        "topic": "ecg/device6",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "b6d0cf10bf54e002",
                "69f72289033478a8",
                "854d1ab2d4a8006f",
                "134ea5d652f6b0e7"
            ]
        ]
    },
    {
        "id": "b6d0cf10bf54e002",
        "type": "function",
        "z": "6d843e57b45b43cf",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "69f72289033478a8",
        "type": "function",
        "z": "6d843e57b45b43cf",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "c86612c15db79a85"
            ]
        ]
    },
    {
        "id": "e2606e5b75ae9468",
        "type": "mqtt in",
        "z": "6d843e57b45b43cf",
        "name": "",
        "topic": "processed/device6",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "91da6c588ddc2def"
            ]
        ]
    },
    {
        "id": "0730b51fdb7e2667",
        "type": "ui_text",
        "z": "6d843e57b45b43cf",
        "group": "067c42357b3bc972",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "91da6c588ddc2def",
        "type": "function",
        "z": "6d843e57b45b43cf",
        "name": "function 40",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 580,
        "wires": [
            [
                "ef8b7735a1a12e17",
                "0730b51fdb7e2667"
            ],
            [
                "5e7417d679fb3f12"
            ],
            [
                "011fd3ca77d8c492"
            ],
            [
                "b9b9b9cea956ccfa"
            ],
            [
                "2b1998eb9ff724f5"
            ]
        ]
    },
    {
        "id": "ef8b7735a1a12e17",
        "type": "ui_chart",
        "z": "6d843e57b45b43cf",
        "name": "",
        "group": "067c42357b3bc972",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "5e7417d679fb3f12",
        "type": "ui_chart",
        "z": "6d843e57b45b43cf",
        "name": "",
        "group": "067c42357b3bc972",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "011fd3ca77d8c492",
        "type": "ui_template",
        "z": "6d843e57b45b43cf",
        "group": "067c42357b3bc972",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b9b9b9cea956ccfa",
        "type": "ui_gauge",
        "z": "6d843e57b45b43cf",
        "name": "",
        "group": "067c42357b3bc972",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 640,
        "wires": []
    },
    {
        "id": "854d1ab2d4a8006f",
        "type": "function",
        "z": "6d843e57b45b43cf",
        "name": "function 41",
        "func": "const deviceId = \"ECG-6\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "1531eb7ce41920ba"
            ]
        ]
    },
    {
        "id": "1531eb7ce41920ba",
        "type": "ui_template",
        "z": "6d843e57b45b43cf",
        "group": "067c42357b3bc972",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2b1998eb9ff724f5",
        "type": "function",
        "z": "6d843e57b45b43cf",
        "name": "function 42",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 680,
        "wires": [
            [
                "966c40f3830ecfab"
            ]
        ]
    },
    {
        "id": "966c40f3830ecfab",
        "type": "ui_template",
        "z": "6d843e57b45b43cf",
        "group": "067c42357b3bc972",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c86612c15db79a85",
        "type": "ui_gauge",
        "z": "6d843e57b45b43cf",
        "name": "",
        "group": "067c42357b3bc972",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "134ea5d652f6b0e7",
        "type": "function",
        "z": "6d843e57b45b43cf",
        "name": "function 43",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "751cd898206a344f"
            ]
        ]
    },
    {
        "id": "751cd898206a344f",
        "type": "file",
        "z": "6d843e57b45b43cf",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device6.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6ecd883fa10f1fc2",
        "type": "inject",
        "z": "6d843e57b45b43cf",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-6\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "854d1ab2d4a8006f"
            ]
        ]
    },
    {
        "id": "c0e852a99e33b8d2",
        "type": "mqtt in",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "topic": "ecg/device7",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 160,
        "wires": [
            [
                "9d828939b80685c8",
                "008622be2b824612",
                "1610a6465e7eb497",
                "3a068c9340f5fbd3"
            ]
        ]
    },
    {
        "id": "9d828939b80685c8",
        "type": "function",
        "z": "73d2d98fc364e2ae",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "008622be2b824612",
        "type": "function",
        "z": "73d2d98fc364e2ae",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "6e8dbbe81519b996"
            ]
        ]
    },
    {
        "id": "108bf65c87fb6c8e",
        "type": "mqtt in",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "topic": "processed/device7",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 560,
        "wires": [
            [
                "eb8ee0cfba6b2ffc"
            ]
        ]
    },
    {
        "id": "24cb95e0779fdf75",
        "type": "ui_text",
        "z": "73d2d98fc364e2ae",
        "group": "574b012cc77fb53d",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 610,
        "y": 500,
        "wires": []
    },
    {
        "id": "eb8ee0cfba6b2ffc",
        "type": "function",
        "z": "73d2d98fc364e2ae",
        "name": "function 48",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 560,
        "wires": [
            [
                "d6e0f324336528ed",
                "24cb95e0779fdf75"
            ],
            [
                "475978430973d910"
            ],
            [
                "6112a77f6851768a"
            ],
            [
                "1d2b7c2225756924"
            ],
            [
                "b751ccc6d1a0f01f"
            ]
        ]
    },
    {
        "id": "d6e0f324336528ed",
        "type": "ui_chart",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "group": "574b012cc77fb53d",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "475978430973d910",
        "type": "ui_chart",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "group": "574b012cc77fb53d",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "6112a77f6851768a",
        "type": "ui_template",
        "z": "73d2d98fc364e2ae",
        "group": "574b012cc77fb53d",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "1d2b7c2225756924",
        "type": "ui_gauge",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "group": "574b012cc77fb53d",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 620,
        "wires": []
    },
    {
        "id": "1610a6465e7eb497",
        "type": "function",
        "z": "73d2d98fc364e2ae",
        "name": "function 49",
        "func": "const deviceId = \"ECG-7\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 100,
        "wires": [
            [
                "a1628e3c32a089a1"
            ]
        ]
    },
    {
        "id": "a1628e3c32a089a1",
        "type": "ui_template",
        "z": "73d2d98fc364e2ae",
        "group": "574b012cc77fb53d",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "b751ccc6d1a0f01f",
        "type": "function",
        "z": "73d2d98fc364e2ae",
        "name": "function 50",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 660,
        "wires": [
            [
                "b18970f59e8757aa"
            ]
        ]
    },
    {
        "id": "b18970f59e8757aa",
        "type": "ui_template",
        "z": "73d2d98fc364e2ae",
        "group": "574b012cc77fb53d",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "6e8dbbe81519b996",
        "type": "ui_gauge",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "group": "574b012cc77fb53d",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "3a068c9340f5fbd3",
        "type": "function",
        "z": "73d2d98fc364e2ae",
        "name": "function 51",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 60,
        "wires": [
            [
                "e9701bc5f5f07c6a"
            ]
        ]
    },
    {
        "id": "e9701bc5f5f07c6a",
        "type": "file",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device7.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "334019b726b9d4ec",
        "type": "inject",
        "z": "73d2d98fc364e2ae",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-7\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "1610a6465e7eb497"
            ]
        ]
    },
    {
        "id": "6021a7afd817bafc",
        "type": "mqtt in",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "topic": "ecg/device8",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 160,
        "wires": [
            [
                "0dc5261c27b86270",
                "2a6a68cea97ac430",
                "c2ae4c6bb85ea88d",
                "c0aac9e0af3ee971"
            ]
        ]
    },
    {
        "id": "0dc5261c27b86270",
        "type": "function",
        "z": "e69a2f485c6c5f7d",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "2a6a68cea97ac430",
        "type": "function",
        "z": "e69a2f485c6c5f7d",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 280,
        "wires": [
            [
                "a118e74a47de43f2"
            ]
        ]
    },
    {
        "id": "51409f03cd8d689d",
        "type": "mqtt in",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "topic": "processed/device8",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 560,
        "wires": [
            [
                "aa6d1322411ebb4a"
            ]
        ]
    },
    {
        "id": "d8d611044bca9a29",
        "type": "ui_text",
        "z": "e69a2f485c6c5f7d",
        "group": "6bd34fd905a51ff8",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 590,
        "y": 500,
        "wires": []
    },
    {
        "id": "aa6d1322411ebb4a",
        "type": "function",
        "z": "e69a2f485c6c5f7d",
        "name": "function 56",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 560,
        "wires": [
            [
                "c8c8bea852f0a98f",
                "d8d611044bca9a29"
            ],
            [
                "35c05018be898615"
            ],
            [
                "8e68f9b3be0e9f71"
            ],
            [
                "5849ed630fe10db8"
            ],
            [
                "7a33b87d7125433c"
            ]
        ]
    },
    {
        "id": "c8c8bea852f0a98f",
        "type": "ui_chart",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "group": "6bd34fd905a51ff8",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 620,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "35c05018be898615",
        "type": "ui_chart",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "group": "6bd34fd905a51ff8",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 620,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "8e68f9b3be0e9f71",
        "type": "ui_template",
        "z": "e69a2f485c6c5f7d",
        "group": "6bd34fd905a51ff8",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "5849ed630fe10db8",
        "type": "ui_gauge",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "group": "6bd34fd905a51ff8",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 620,
        "wires": []
    },
    {
        "id": "c2ae4c6bb85ea88d",
        "type": "function",
        "z": "e69a2f485c6c5f7d",
        "name": "function 57",
        "func": "const deviceId = \"ECG-8\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 100,
        "wires": [
            [
                "8da41f7dbe23f12f"
            ]
        ]
    },
    {
        "id": "8da41f7dbe23f12f",
        "type": "ui_template",
        "z": "e69a2f485c6c5f7d",
        "group": "6bd34fd905a51ff8",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "7a33b87d7125433c",
        "type": "function",
        "z": "e69a2f485c6c5f7d",
        "name": "function 58",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 660,
        "wires": [
            [
                "b73ba2dd5c8efafe"
            ]
        ]
    },
    {
        "id": "b73ba2dd5c8efafe",
        "type": "ui_template",
        "z": "e69a2f485c6c5f7d",
        "group": "6bd34fd905a51ff8",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "a118e74a47de43f2",
        "type": "ui_gauge",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "group": "6bd34fd905a51ff8",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 280,
        "wires": []
    },
    {
        "id": "c0aac9e0af3ee971",
        "type": "function",
        "z": "e69a2f485c6c5f7d",
        "name": "function 59",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 60,
        "wires": [
            [
                "b0cd26d1ba0530a9"
            ]
        ]
    },
    {
        "id": "b0cd26d1ba0530a9",
        "type": "file",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device8.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 730,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "cbe01ad8b1d94040",
        "type": "inject",
        "z": "e69a2f485c6c5f7d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-8\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 350,
        "y": 200,
        "wires": [
            [
                "c2ae4c6bb85ea88d"
            ]
        ]
    },
    {
        "id": "7ce7c8048c174e7f",
        "type": "mqtt in",
        "z": "8082bc4b568774ed",
        "name": "",
        "topic": "ecg/device9",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "27f1aacd78cdc818",
                "5cac7928ae1bba7e",
                "4cd8c684a414a6c1",
                "e56477acbadbd2f3"
            ]
        ]
    },
    {
        "id": "27f1aacd78cdc818",
        "type": "function",
        "z": "8082bc4b568774ed",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "5cac7928ae1bba7e",
        "type": "function",
        "z": "8082bc4b568774ed",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 280,
        "wires": [
            [
                "53caa1a95c1cc80d"
            ]
        ]
    },
    {
        "id": "41bde26c39df4f3a",
        "type": "mqtt in",
        "z": "8082bc4b568774ed",
        "name": "",
        "topic": "processed/device9",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "a5d3ce1422af5036"
            ]
        ]
    },
    {
        "id": "92adc6a1df84b198",
        "type": "ui_text",
        "z": "8082bc4b568774ed",
        "group": "4b6faf155b2cc2e1",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 610,
        "y": 520,
        "wires": []
    },
    {
        "id": "a5d3ce1422af5036",
        "type": "function",
        "z": "8082bc4b568774ed",
        "name": "function 5",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 580,
        "wires": [
            [
                "dc0f54f4e602666e",
                "92adc6a1df84b198"
            ],
            [
                "a55c9d90ce043882"
            ],
            [
                "0cd971c9b0c13303"
            ],
            [
                "bb71a648ceea92e7"
            ],
            [
                "c5c3991157f0b655"
            ]
        ]
    },
    {
        "id": "dc0f54f4e602666e",
        "type": "ui_chart",
        "z": "8082bc4b568774ed",
        "name": "",
        "group": "4b6faf155b2cc2e1",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a55c9d90ce043882",
        "type": "ui_chart",
        "z": "8082bc4b568774ed",
        "name": "",
        "group": "4b6faf155b2cc2e1",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 640,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "0cd971c9b0c13303",
        "type": "ui_template",
        "z": "8082bc4b568774ed",
        "group": "4b6faf155b2cc2e1",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 610,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "bb71a648ceea92e7",
        "type": "ui_gauge",
        "z": "8082bc4b568774ed",
        "name": "",
        "group": "4b6faf155b2cc2e1",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 640,
        "wires": []
    },
    {
        "id": "4cd8c684a414a6c1",
        "type": "function",
        "z": "8082bc4b568774ed",
        "name": "function 6",
        "func": "const deviceId = \"ECG-9\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 120,
        "wires": [
            [
                "f0b0ba9baad5de41"
            ]
        ]
    },
    {
        "id": "f0b0ba9baad5de41",
        "type": "ui_template",
        "z": "8082bc4b568774ed",
        "group": "4b6faf155b2cc2e1",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 620,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "c5c3991157f0b655",
        "type": "function",
        "z": "8082bc4b568774ed",
        "name": "function 7",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 680,
        "wires": [
            [
                "7672c9161fe317e7"
            ]
        ]
    },
    {
        "id": "7672c9161fe317e7",
        "type": "ui_template",
        "z": "8082bc4b568774ed",
        "group": "4b6faf155b2cc2e1",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 840,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "53caa1a95c1cc80d",
        "type": "ui_gauge",
        "z": "8082bc4b568774ed",
        "name": "",
        "group": "4b6faf155b2cc2e1",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 630,
        "y": 280,
        "wires": []
    },
    {
        "id": "e56477acbadbd2f3",
        "type": "function",
        "z": "8082bc4b568774ed",
        "name": "function 8",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 80,
        "wires": [
            [
                "ba7de7c4ccd401f2"
            ]
        ]
    },
    {
        "id": "ba7de7c4ccd401f2",
        "type": "file",
        "z": "8082bc4b568774ed",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device9.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "94258018ca327ea6",
        "type": "inject",
        "z": "8082bc4b568774ed",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-9\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "4cd8c684a414a6c1"
            ]
        ]
    },
    {
        "id": "86edca1c651146e8",
        "type": "mqtt in",
        "z": "677f06d969d5a671",
        "name": "",
        "topic": "ecg/device10",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 130,
        "y": 140,
        "wires": [
            [
                "e9597d8e8a3f7b52",
                "9fe2a720ef7197fe",
                "d904b5b54b892f95",
                "5c3ff9e7e1d70cd3"
            ]
        ]
    },
    {
        "id": "e9597d8e8a3f7b52",
        "type": "function",
        "z": "677f06d969d5a671",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "9fe2a720ef7197fe",
        "type": "function",
        "z": "677f06d969d5a671",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 240,
        "wires": [
            [
                "befb0d43c7f066f5"
            ]
        ]
    },
    {
        "id": "832cae9045857c57",
        "type": "mqtt in",
        "z": "677f06d969d5a671",
        "name": "",
        "topic": "processed/device10",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 540,
        "wires": [
            [
                "754fc971a793e1c2"
            ]
        ]
    },
    {
        "id": "004bc10566017153",
        "type": "ui_text",
        "z": "677f06d969d5a671",
        "group": "d13e25f8bd900779",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "Georgia,Georgia,serif",
        "fontSize": "25",
        "color": "#1cb5ff",
        "x": 590,
        "y": 480,
        "wires": []
    },
    {
        "id": "754fc971a793e1c2",
        "type": "function",
        "z": "677f06d969d5a671",
        "name": "function 13",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 540,
        "wires": [
            [
                "252c2b8bb8b5ae26",
                "004bc10566017153"
            ],
            [
                "8d617dd596c9329f"
            ],
            [
                "f07533e748567321"
            ],
            [
                "e4bcb5722780b6a9"
            ],
            [
                "8add33e690765bfb"
            ]
        ]
    },
    {
        "id": "252c2b8bb8b5ae26",
        "type": "ui_chart",
        "z": "677f06d969d5a671",
        "name": "",
        "group": "d13e25f8bd900779",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 620,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "8d617dd596c9329f",
        "type": "ui_chart",
        "z": "677f06d969d5a671",
        "name": "",
        "group": "d13e25f8bd900779",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 620,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "f07533e748567321",
        "type": "ui_template",
        "z": "677f06d969d5a671",
        "group": "d13e25f8bd900779",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 590,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "e4bcb5722780b6a9",
        "type": "ui_gauge",
        "z": "677f06d969d5a671",
        "name": "",
        "group": "d13e25f8bd900779",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 600,
        "wires": []
    },
    {
        "id": "d904b5b54b892f95",
        "type": "function",
        "z": "677f06d969d5a671",
        "name": "function 14",
        "func": "const deviceId = \"ECG-10\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 80,
        "wires": [
            [
                "3d17f3df036f04a8"
            ]
        ]
    },
    {
        "id": "3d17f3df036f04a8",
        "type": "ui_template",
        "z": "677f06d969d5a671",
        "group": "d13e25f8bd900779",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 600,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "8add33e690765bfb",
        "type": "function",
        "z": "677f06d969d5a671",
        "name": "function 15",
        "func": "let rsp = parseFloat(msg.payload); // VERY IMPORTANT: force it to number\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 640,
        "wires": [
            [
                "b5eb2a355ddb8305"
            ]
        ]
    },
    {
        "id": "b5eb2a355ddb8305",
        "type": "ui_template",
        "z": "677f06d969d5a671",
        "group": "d13e25f8bd900779",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 820,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "befb0d43c7f066f5",
        "type": "ui_gauge",
        "z": "677f06d969d5a671",
        "name": "",
        "group": "d13e25f8bd900779",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 610,
        "y": 240,
        "wires": []
    },
    {
        "id": "5c3ff9e7e1d70cd3",
        "type": "function",
        "z": "677f06d969d5a671",
        "name": "function 16",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 40,
        "wires": [
            [
                "5b37806d1f28c79f"
            ]
        ]
    },
    {
        "id": "5b37806d1f28c79f",
        "type": "file",
        "z": "677f06d969d5a671",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device10.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 740,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "8c903c923598e7e6",
        "type": "inject",
        "z": "677f06d969d5a671",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{   \"device\": \"ECG-10\",   \"msg_id\": 0,   \"pads_connected\": null,   \"seq\": 0,   \"ecg\": [],   \"ts\": [] }",
        "payloadType": "json",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "d904b5b54b892f95"
            ]
        ]
    },
    {
        "id": "1a95c6ccb5735b1f",
        "type": "mqtt in",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "topic": "ecg/device1",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 160,
        "wires": [
            [
                "212b99e4b293c135",
                "a0544e078c8a37b3",
                "e42286dd9e09b9d5",
                "1844e5e21656e50f",
                "87c3b5d161a95104",
                "2cfd813fb5757be0"
            ]
        ]
    },
    {
        "id": "4cc74a94ef02263d",
        "type": "ui_gauge",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 4,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "Batterie (%)",
        "label": "%",
        "format": "{{msg.payload}}",
        "min": "0",
        "max": "100",
        "colors": [
            "#b50000",
            "#e6e600",
            "#00ff00"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 730,
        "y": 220,
        "wires": []
    },
    {
        "id": "212b99e4b293c135",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "device name",
        "func": "msg.payload = msg.payload.device;  // Extract the \"device\" value\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "a0544e078c8a37b3",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "battery",
        "func": "if (msg.payload && msg.payload.battery !== undefined) {\n    msg.payload = msg.payload.battery;\n    return msg;\n} else {\n    return null;\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 220,
        "wires": [
            [
                "4cc74a94ef02263d"
            ]
        ]
    },
    {
        "id": "4dd1415c44a82891",
        "type": "file",
        "z": "b6da6b5f72cc125a",
        "name": "data blatt",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_data.csv",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "true",
        "encoding": "none",
        "x": 1010,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "1844e5e21656e50f",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 18",
        "func": "let ecgBuffer = flow.get(\"ecgBuffer\") || [];\nconst maxSamples = 50000\n// Validate payload\nif (!msg.payload || !Array.isArray(msg.payload.ecg)) {\n    node.warn(\"Invalid payload format\");\n    return null;\n}\n\n// Append new data\necgBuffer = ecgBuffer.concat(msg.payload.ecg);\n\n// Trim buffer if needed\nif (ecgBuffer.length > maxSamples) {\n    ecgBuffer = ecgBuffer.slice(ecgBuffer.length - maxSamples);\n}\n\n// Save updated buffer to flow\nflow.set(\"ecgBuffer\", ecgBuffer);\n\n// Optional: send out current buffer every time (or add a condition here)\nmsg.payload = {\n    buffer: ecgBuffer,\n    length: ecgBuffer.length\n};\n\nnode.status({ fill: \"green\", shape: \"dot\", text: `Buffer: ${ecgBuffer.length}/${maxSamples}` });\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "b16a8f623f453ebd",
        "type": "ui_button",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 8,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "save data",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 690,
        "y": 300,
        "wires": [
            [
                "f5f688c6562fede2"
            ]
        ]
    },
    {
        "id": "f5f688c6562fede2",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 19",
        "func": "let ecgBuffer = flow.get(\"ecgBuffer\") || [];\n\nif (!Array.isArray(ecgBuffer) || ecgBuffer.length === 0) {\n    node.warn(\"No ECG data to save!\");\n    return null;\n}\n\nlet csvData = \"ecg_signal\\n\";\ncsvData += ecgBuffer.map(v => v.toFixed(3)).join(\"\\n\");\n\nmsg.payload = csvData;\nmsg.filename = \"C:/Users/Dima/Desktop/ecg_data.csv\";\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 300,
        "wires": [
            [
                "4dd1415c44a82891"
            ]
        ]
    },
    {
        "id": "df049e7ae8461b4c",
        "type": "mqtt out",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "6a8dd33d9e7fde80",
        "x": 1070,
        "y": 360,
        "wires": []
    },
    {
        "id": "844d3396112ed568",
        "type": "mqtt in",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "topic": "processed/device1",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 250,
        "y": 520,
        "wires": [
            [
                "06fb5009c2d7566f"
            ]
        ]
    },
    {
        "id": "b55bb56ace669007",
        "type": "ui_text",
        "z": "b6da6b5f72cc125a",
        "group": "7161a4fc5f3d2a7d",
        "order": 2,
        "width": 4,
        "height": 3,
        "name": "",
        "label": "BPM",
        "format": "{{msg.payload}}",
        "layout": "col-center",
        "className": "",
        "style": true,
        "font": "",
        "fontSize": "25",
        "color": "#09afff",
        "x": 690,
        "y": 460,
        "wires": []
    },
    {
        "id": "e42286dd9e09b9d5",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 20",
        "func": "let payload;\n\ntry {\n    payload = (typeof msg.payload === 'string') ? JSON.parse(msg.payload) : msg.payload;\n} catch (err) {\n    node.warn(\"Invalid payload format\");\n    return null;\n}\n\nlet incomingTS = payload.ts;\nlet currentMsgId = payload.msg_id;\n\nif (!incomingTS || incomingTS.length < 2) {\n    node.warn(\"Message contains no or too few timestamps.\");\n    return null;\n}\n\n// Get stored state\nlet lastId = global.get(\"ts_last_id\");\nlet tsBuffer = global.get(\"ts_buffer\") || [];\n\n// If it's the same msg_id → continue accumulating\nif (currentMsgId === lastId || lastId === undefined) {\n    tsBuffer = tsBuffer.concat(incomingTS);\n    global.set(\"ts_buffer\", tsBuffer);\n    global.set(\"ts_last_id\", currentMsgId);\n    node.status({ fill: \"green\", shape: \"dot\", text: `Collecting msg_id ${currentMsgId} (${tsBuffer.length} ts)` });\n    return null;\n}\n\n// If msg_id has changed → analyze the previous one\nif (tsBuffer.length < 2) {\n    node.warn(`Not enough data in previous msg_id (${lastId}) to calculate.`);\n    // Reset for new msg_id\n    global.set(\"ts_buffer\", incomingTS);\n    global.set(\"ts_last_id\", currentMsgId);\n    return null;\n}\n\n// Calculate sampling rate for previous message\nlet intervals = [];\nfor (let i = 1; i < tsBuffer.length; i++) {\n    intervals.push(tsBuffer[i] - tsBuffer[i - 1]);\n}\nlet avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;\nlet samplingRate = 1_000_000 / avgInterval;  // µs → Hz\n\nmsg.payload = {\n    msg_id: lastId,\n    samples: tsBuffer.length,\n    avg_interval_us: avgInterval.toFixed(2),\n    estimated_sampling_rate_hz: samplingRate.toFixed(2)\n};\n\n// Reset for the new ID\nglobal.set(\"ts_buffer\", incomingTS);\nglobal.set(\"ts_last_id\", currentMsgId);\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: `Analyzed msg_id ${lastId}` });\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "8e3cece3ea8ef000",
        "type": "ui_button",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 7,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "clear buffer",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "clear",
        "payloadType": "str",
        "topic": "clear",
        "topicType": "msg",
        "x": 710,
        "y": 360,
        "wires": [
            [
                "9539355397cc018d"
            ]
        ]
    },
    {
        "id": "9539355397cc018d",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 21",
        "func": "if (msg.payload === \"clear\") {\n    flow.set(\"ecgBuffer\", []);\n    node.status({ fill: \"red\", shape: \"ring\", text: \"Buffer cleared\" });\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "06fb5009c2d7566f",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 22",
        "func": "let data = msg.payload;\n\nif (typeof data === \"string\") {\n    try {\n        data = JSON.parse(data);\n    } catch (e) {\n        node.warn(\"Invalid JSON\");\n        return null;\n    }\n}\n\nmsg.bpm = { payload: data.bpm_mean };\nmsg.hrv = { payload: data.hrv_rmssd };\nmsg.zone = { payload: data.zone };\nmsg.quality = { payload: data.ecg_quality };\nmsg.rsp = { payload: data.ecg_rsp_mean };\n\nreturn [msg.bpm, msg.hrv, msg.zone, msg.quality, msg.rsp];\n",
        "outputs": 5,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 520,
        "wires": [
            [
                "bfa23eb56b872eda",
                "b55bb56ace669007"
            ],
            [
                "7ccfa6b3153851a2"
            ],
            [
                "300a9a4bb7189dd0"
            ],
            [
                "de8d26eb1287ef90"
            ],
            [
                "1bf73b760a7a4f28"
            ]
        ]
    },
    {
        "id": "bfa23eb56b872eda",
        "type": "ui_chart",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 5,
        "width": 8,
        "height": 3,
        "label": "Heart Rate BPM",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 720,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "7ccfa6b3153851a2",
        "type": "ui_chart",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 6,
        "width": 8,
        "height": 3,
        "label": "HRV (RMSSD)",
        "chartType": "line",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 720,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "300a9a4bb7189dd0",
        "type": "ui_template",
        "z": "b6da6b5f72cc125a",
        "group": "7161a4fc5f3d2a7d",
        "name": "tr zone",
        "order": 9,
        "width": 4,
        "height": 1,
        "format": "<div style=\"font-size: 20px; font-weight: bold;\">\n    Zone: {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 690,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "de8d26eb1287ef90",
        "type": "ui_gauge",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "group": "7161a4fc5f3d2a7d",
        "order": 3,
        "width": 2,
        "height": 3,
        "gtype": "compass",
        "title": "ECG Quality",
        "label": "units",
        "format": "{{value}}",
        "min": 0,
        "max": "1",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "0.5",
        "seg2": "0.9",
        "diff": false,
        "className": "",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "1bf73b760a7a4f28",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 23",
        "func": "let rsp = parseFloat(msg.payload);\n\nlet breathingStatus = \"Unknown\";\nlet color = \"grey\";\n\nif (rsp > -3 && rsp < 3) {\n    breathingStatus = \"Normal Breathing\";\n    color = \"#4f97dc\";\n} else {\n    breathingStatus = \"Irregular Breathing\";\n    color = \"red\";\n}\n\nmsg.payload = breathingStatus;\nmsg.color = color;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 620,
        "wires": [
            [
                "f56b478f7b98618c"
            ]
        ]
    },
    {
        "id": "f56b478f7b98618c",
        "type": "ui_template",
        "z": "b6da6b5f72cc125a",
        "group": "7161a4fc5f3d2a7d",
        "name": "",
        "order": 10,
        "width": 4,
        "height": 1,
        "format": "<div style=\"color: {{msg.color}}; font-size: 20px; font-weight: bold;\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 940,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "4d1602fd9672d2d7",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 24",
        "func": "// Incoming message like:\n// { device: \"ECG-1\", msg_id: 199, pads_connected: true, seq: 401, ecg: [val1, val2, val3, val4, val5] }\n\nif (!msg.payload || !Array.isArray(msg.payload.ecg)) {\n    node.warn(\"Invalid payload format\");\n    return null;\n}\n\n// Convert ecg array to CSV string (one value per line)\nlet ecgArray = msg.payload.ecg;\nlet csvString = ecgArray.join(\"\\n\") + \"\\n\";\n\nmsg.payload = csvString;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 700,
        "wires": [
            [
                "a34b692ad26efb7d"
            ]
        ]
    },
    {
        "id": "a34b692ad26efb7d",
        "type": "file",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 390,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "86c4b2123240d2bb",
        "type": "ui_template",
        "z": "b6da6b5f72cc125a",
        "group": "7161a4fc5f3d2a7d",
        "name": "",
        "order": 1,
        "width": 8,
        "height": 1,
        "format": "<div ng-style=\"{\n    'font-size': '20px',\n    'font-weight': 'bold',\n    'text-align': 'center',\n    'color': msg.color\n}\">\n    {{msg.payload}}\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": true,
        "templateScope": "local",
        "className": "",
        "x": 720,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "87c3b5d161a95104",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 25",
        "func": "const deviceId = \"ECG-1\"; // Fixed device ID for this function node\nconst timeoutDuration = 20000; // 10 seconds\nconst timeoutKey = \"offline_timeout_\" + deviceId;\n\n// Cancel any existing timeout\nconst prevTimeout = flow.get(timeoutKey);\nif (prevTimeout) {\n    clearTimeout(prevTimeout);\n}\n\n// Set a new timeout to trigger Offline if no message is received\nconst timeout = setTimeout(() => {\n    const offlineMsg = {\n        payload: \"Offline\",\n        color: \"gray\",\n        device: deviceId\n    };\n    node.send(offlineMsg);\n}, timeoutDuration);\nflow.set(timeoutKey, timeout);\n\n// Process the current message\nif (msg.payload.pads_connected === true) {\n    msg.payload = \"Connected\";\n    msg.color = \"#4f97dc\";\n} else if (msg.payload.pads_connected === false) {\n    msg.payload = \"Disconnected\";\n    msg.color = \"red\";\n} else {\n    msg.payload = \"Offline\"; // Only used at startup\n    msg.color = \"gray\";\n}\nmsg.device = deviceId;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 100,
        "wires": [
            [
                "86c4b2123240d2bb"
            ]
        ]
    },
    {
        "id": "2cfd813fb5757be0",
        "type": "function",
        "z": "b6da6b5f72cc125a",
        "name": "function 26",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 40,
        "wires": [
            [
                "cc8932a8f81bd3e8"
            ]
        ]
    },
    {
        "id": "cc8932a8f81bd3e8",
        "type": "file",
        "z": "b6da6b5f72cc125a",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device1.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 850,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "37114461c0075c0b",
        "type": "subflow:155c5133bdfefab4",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 40,
        "wires": []
    },
    {
        "id": "8af38ba74b2eacee",
        "type": "subflow:7ccb836c476825f3",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 80,
        "wires": []
    },
    {
        "id": "651eba57c333e87c",
        "type": "mqtt in",
        "z": "406168d7e2283e1c",
        "name": "",
        "topic": "ecg/device1",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "7c545bea401eb861",
        "type": "debug",
        "z": "406168d7e2283e1c",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 40,
        "wires": []
    },
    {
        "id": "6dc29e6aad6bdf5f",
        "type": "file",
        "z": "406168d7e2283e1c",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device1.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 510,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "7b885121da79880a",
        "type": "function",
        "z": "406168d7e2283e1c",
        "name": "function 1",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 640,
        "wires": [
            [
                "6dc29e6aad6bdf5f"
            ]
        ]
    },
    {
        "id": "c8613bdeed8a5719",
        "type": "file",
        "z": "406168d7e2283e1c",
        "name": "",
        "filename": "C:\\Users\\Dima\\Desktop\\ecg_recording_device2.csv",
        "filenameType": "str",
        "appendNewline": false,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 510,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "6135cc2879b04d0d",
        "type": "function",
        "z": "406168d7e2283e1c",
        "name": "function 2",
        "func": "let ecg = msg.payload.ecg;\nlet ts = msg.payload.ts;\nlet startUtc = msg.payload.start_utc;\n\nif (!ecg || !ts) return null;\n\n// Wenn start_utc enthalten ist (seq == 0), speichern\nif (startUtc !== undefined) {\n    global.set(\"ecg_start_utc\", startUtc);\n} else {\n    startUtc = global.get(\"ecg_start_utc\");\n    if (startUtc === undefined) return null; // noch keine gültige Zeitbasis\n}\n\n// CSV-Zeilen generieren\nlet lines = [];\nfor (let i = 0; i < ecg.length; i++) {\n    let utcSample = startUtc + ts[i] / 1_000_000;\n    lines.push(utcSample.toFixed(6) + \",\" + ecg[i].toFixed(3));\n}\n\nmsg.payload = lines.join(\"\\n\") + \"\\n\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 100,
        "y": 680,
        "wires": [
            [
                "c8613bdeed8a5719"
            ]
        ]
    },
    {
        "id": "d092fd6ea7581b70",
        "type": "mqtt in",
        "z": "406168d7e2283e1c",
        "name": "",
        "topic": "ecg/device2",
        "qos": "0",
        "datatype": "auto-detect",
        "broker": "6a8dd33d9e7fde80",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 290,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "16faa63161565c14",
        "type": "subflow:b61db2d397ed3f52",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 120,
        "wires": []
    },
    {
        "id": "b9e8f81754c734af",
        "type": "subflow:83fee0b4628f9e33",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 160,
        "wires": []
    },
    {
        "id": "5ef4cb89ad573726",
        "type": "subflow:87c8228a65d82b8b",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 200,
        "wires": []
    },
    {
        "id": "bd0c51ea96a57c4e",
        "type": "subflow:6d843e57b45b43cf",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 240,
        "wires": []
    },
    {
        "id": "5fe77619b611e021",
        "type": "subflow:73d2d98fc364e2ae",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 280,
        "wires": []
    },
    {
        "id": "5e88715ec1421e02",
        "type": "subflow:e69a2f485c6c5f7d",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 320,
        "wires": []
    },
    {
        "id": "5842fa01021ebf23",
        "type": "subflow:8082bc4b568774ed",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 360,
        "wires": []
    },
    {
        "id": "c235ba086e584818",
        "type": "subflow:677f06d969d5a671",
        "z": "406168d7e2283e1c",
        "name": "",
        "x": 100,
        "y": 400,
        "wires": []
    }
]